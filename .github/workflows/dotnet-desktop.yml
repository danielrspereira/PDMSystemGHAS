
name: CI

#on:
#  push:
#    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]
#  workflow_dispatch:

#jobs:
#  build:
#    runs-on: windows-latest

#    env:
#      Solution_Name: PDMSystem.sln                        
#      Test_Project_Path: PDMSystem\PDMSystem.csproj                

#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
    
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
#    - name: Setup MSBuild
#      uses: microsoft/setup-msbuild@v2

#    - name: Setup NuGet.exe for use with actions
#      uses: NuGet/setup-nuget@v2.0.0

#    - name: Restore Nuget Packages
#      run: nuget restore PDMSystem.sln

#    - name: Build the solution
#      run: msbuild PDMSystem.sln /p:Configuration=Release

#    - name: Create CI directory if it doesn't exist
#      run: |
          if not exist "PDMSystem\CI" mkdir "PDMSystem\CI"
        
#    - name: Check CI directory contents
#      run: dir CI

#    - name: Move build artifacts to CI directory
#      run: |
#        mv path/to/build/artifacts/* PDMSystem/CI/

    #- name: Copy Build Artifacts to CI Directory
    #  run: xcopy PDMSystem\PDMSystem\bin\Release CI /E /I /

#    - name: Upload Build Artifacts
#      uses: actions/upload-artifact@v3
#      with:
#        name: Build-Artifacts
#        path: PDMSystem/CI/*

###### ORIGINAL #################################################################      
    
    # Install the .NET Core workload
    #- name: Install .NET Core
    #  uses: actions/setup-dotnet@v4
    #  with:
    #    dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Setup MSBuild.exe
    #  uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    #- name: Restore the application
    #  run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #  env:
    #    Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    #- name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    Appx_Bundle: Always
    #    Appx_Bundle_Platforms: x86|x64
    #    Appx_Package_Build_Mode: StoreUpload
    #    Configuration: ${{ matrix.configuration }}

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages
